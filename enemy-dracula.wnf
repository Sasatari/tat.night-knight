include dr:dracula

byte array @dracu_to_left_0[16] = [
%........,
%........,
%.1111.1.,
%1111111.,
%.1..111.,
%.1.111.1,
%11111.1.,
%.111.1..,
%......1.,
%..1.11.1,
%.......1,
%..1.11.1,
%..1.11.1,
%.......1,
%...11.1.,
%..111...,
]

byte array @dracu_to_left_1[16] = [
%........,
%.1111.1.,
%1111111.,
%.1..111.,
%.1.111.1,
%11111.1.,
%.111.1..,
%.....11.,
%1.111..1,
%1......1,
%...11..1,
%1.1.1..1,
%1111111.,
%111.1111,
%.1....1.,
%........,
]

byte array @dracu_to_left_2[16] = [
%........,
%.1111.1.,
%1111111.,
%.1..111.,
%.1.111.1,
%11111.1.,
%.111.1..,
%.....1..,
%......1.,
%.11.1..1,
%.11.1..1,
%.......1,
%.1....11,
%.11..111,
%111....1,
%........,
]

byte array @dracu_to_left[12] = [
80,80,80, // @dracu_to_left_0,
81,81,81, // @dracu_to_left_1,
82,82,82, // @dracu_to_left_0,
83,83,83, // @dracu_to_left_2,
ANIM_END,
// position 13
7,5,3,1,3,5,7,ANIM_END
]

// To rotate a line in emacs
// (fset 'rotate-line
//   [right ?\C-  right right right right ?\C-w right right right right ?\C-y home right ?\C-  right right ?\C-w right right ?\C-y ?\C-  right right ?\C-w right right ?\C-y home right right ?\C-t right right left ?\C-t right ?\C-t right ?\C-t home down])

byte array @dracu_to_right_0[16] = [
%........,
%........,
%.1.1111.,
%.1111111,
%.111..1.,
%1.111.1.,
%.1.11111,
%..1.111.,
%.1......,
%1.11.1..,
%1.......,
%1.11.1..,
%1.11.1..,
%1.......,
%.1.11...,
%...111..,
]

byte array @dracu_to_right_1[16] = [
%........,
%.1.1111.,
%.1111111,
%.111..1.,
%1.111.1.,
%.1.11111,
%..1.111.,
%.11.....,
%1..111.1,
%1......1,
%1..11...,
%1..1.1.1,
%.1111111,
%1111.111,
%.1....1.,
%........,
]

byte array @dracu_to_right_2[16] = [
%........,
%.1.1111.,
%.1111111,
%.111..1.,
%1.111.1.,
%.1.11111,
%..1.111.,
%..1.....,
%.1......,
%1..1.11.,
%1..1.11.,
%1.......,
%11....1.,
%111..11.,
%1....111,
%........,
]

byte array @dracu_to_right[12] = [
84,84,84, // @dracu_to_right_0,
85,85,85, // @dracu_to_right_1,
86,86,86, // @dracu_to_right_0,
87,87,87, // @dracu_to_right_2,
ANIM_END,
// position 13
7,5,3,1,3,5,7,ANIM_END
]


byte array @bat_fly_0[16] = [
%........,
%........,
%........,
%........,
%..1.1...,
%..111...,
%.1.1.1..,
%.11111..,
%1111111.,
%1.111.1.,
%1..1..1.,
%1.....1.,
%........,
%........,
%........,
%........,
]

byte array @bat_fly_1[16] = [
%........,
%........,
%..1.1...,
%..111...,
%.1.1.1..,
%.11111..,
%.11111..,
%1111111.,
%1..1..1.,
%1.....1.,
%1.....1.,
%1.....1.,
%1.....1.,
%........,
%........,
%........,
%........,
]

byte array @bat_fly_2[16] = [
%........,
%........,
%........,
%........,
%.1...1..,
%.1...1..,
%111.111.,
%1111111.,
%11.1.11.,
%1.111.1.,
%1.111.1.,
%..111...,
%...1....,
%........,
%........,
%........,
]

byte array @bat_fly[12] = [
90,90,90,
91,91,91,
92,92,92,
93,93,93,
ANIM_END,
// position 13
7,5,3,1,3,5,7,ANIM_END
]


// Original und was wir daraus gemacht haben
// ..  ..  ..  ..
// ................ ........
// ......#..#...... ..#.#...
// ......####...... ..###...
// ....11.##.11.... .1.#.1..
// ..1111####1111.. .1###1..
// .11111####11111. 11###11.
// 11111.####.11111 1.###.1.
// 1111...##...1111 1..#..1.
// .11..........11. 1.....1.
// ..1..........1.. ........
// ................ ........
//
// ................ ........
// ......#..#...... ..#.#...
// ......####...... ..###...
// ....11.##.11.... .1.#.1..
// ...111####111... .1###1..
// ...111####111... 11###11.
// ..111.####.111.. 11###11.
// ..11...##...11.. 1..#..1.
// .111........111. 1.....1.
// ..11........11.. 1.....1.
// ..11........11.. 1.....1.
// ...11......11... 11...11.
// ....1......1.... .1...1..
// ................ ........
//
// ..1..........1.. .1...1..
// .111........111. .1...1..
// .1111.#..#.1111. 11#.#11.
// 11111.####.11111 11###11.
// 111111.##.111111 11.#.11.
// 11..11####11..11 11###11.
// 1....1####1....1 1.###.1.
// ......####...... ..###...
// .......##....... ...#....
// ................ ........
// ................ ........
// ................ ........
//

byte RANDOM	= $D20A

byte neg_direction = @REG

// Type (Skeleton, Archer, Dark Knight, Vampire...)
byte array type[MAX_ENEMIES] = @enemy_types

// Global and in zero Page!
byte enemy_type = @enemy_type
byte index = @enemy_index

// The number of animation we currently show
byte array anim_number[MAX_ENEMIES] = @enemy_anim_number

byte array hold_count[MAX_ENEMIES] = @enemy_user_data
byte array enemy_color[1] = @enemy_color

byte array attackIndex[MAX_ENEMIES] = @attack_Index

procedure @init_vampire()
begin
  for index:=0 to MAX_ENEMIES-1 do
  begin
    if type[index] == IDX_VAMPIRE then
    begin
      attackIndex[index] := 25
    end
  end
end

procedure @vampire_could_convert_to_bat()
begin
  if RANDOM < 38 and hold_count[index] == 0 then // 15% wird Vampire zur Fledermaus
  begin
      // change type to BAT
      type[index] := IDX_BAT
      enemy_type := IDX_BAT
      anim_number[index] := 13
      enemy_color[index] := $1f
      hold_count[index] := 100
  end
end




const FLY_UP = 255
const FLY_DOWN = 1
const FLY_HORIZONTAL = 0

byte array fly_count[MAX_SPRITES]
byte array fly_direction[MAX_SPRITES]

// xy position of enemies
byte array xpos[MAX_ENEMIES] = @enemy_xpos
byte array ypos[MAX_ENEMIES] = @enemy_ypos

// xy movement of enemies
byte array xstep[MAX_ENEMIES] = @enemy_xstep
byte array ystep[MAX_ENEMIES] = @enemy_ystep

word yposdiv8mul40ypos
word array yposdiv8mul40[@split] = @yposdiv8mul40

byte direction
word screen_pos
word screen = @screen
byte floor

byte topfloor
byte bottomfloor

procedure @init_enemy_fly_bat()
begin
  for index:=0 to MAX_SPRITES-1 do
  begin
    if type[index] == IDX_BAT or type[index] == IDX_VAMPIRE then
    begin
      fly_count[index] := 3     // slowdown for fly_index increment
      fly_direction[index] := FLY_UP
    end
  end
end

byte wall
byte background

// Wir uebernehmen index und enemy_type
procedure @enemy_fly_bat()
begin
  // we fly

  // horizontal control we change direction only at the left wall or at the right wall
  if xstep[index] == 1 then
  begin
    // fly to the right

    // xpos goes from 0 - 160 => right wall is at 160 - width (16) - width ghost (8) == 136
    if xpos[index] > 136 then
    begin
      // xstep[index] := @neg(xstep[index])
      neg_direction := xstep[index]
      xstep[index] := neg:neg_direction
    end
  end
  else
  begin
    // fly to the left

    // xpos goes from 0 - 160 => left wall is at 0 + width (16)
    if xpos[index] < 16 then
    begin
      // xstep[index] := @neg(xstep[index])
      neg_direction := xstep[index]
      xstep[index] := neg:neg_direction
    end
  end

  fly_count[index] := fly_count[index] - 1

  if fly_count[index] == 0 then
  begin
    // every 4 steps we control the up/down direction
    fly_count[index] := 4

    direction := fly_direction[index]

    if direction == FLY_UP then
    begin
      ystep[index] := 255 // fly up
    end

    else if direction == FLY_DOWN then
    begin
      ystep[index] := 1  // fly down
    end

    else if direction == FLY_HORIZONTAL then
    begin
      ystep[index] := 0  // fly horizontal
    end

    yposdiv8mul40ypos := yposdiv8mul40[ypos[index]-24] + game_screen
    screen := (xpos[index])/4 + yposdiv8mul40ypos // (ypos / 8)*40

    screen_pos := 0
    wall := 0

    if xstep[index] == 1 then
    begin
      if direction == FLY_UP then
        screen_pos := 42
      else
        screen_pos := 82
    end
    else if xstep[index] == 255 then
    begin
      if direction == FLY_UP then
        screen_pos := 39
      else
        screen_pos := 79
    end
    if screen_pos != 0 then
    begin
      screen_pos := screen_pos + screen
      background := @mem[screen_pos]
      wall := @isFloorToWalk(background)
      if wall == 1 then
      begin
        // xstep[index] := @neg(xstep[index])
        neg_direction := xstep[index]
        xstep[index] := neg:neg_direction
      end
    end

    if direction == FLY_DOWN then
    begin
      // fly down
      if ypos[index] > 190 then
      begin
        // wir drohen nach unten rauszulaufen, umdrehen
        fly_direction[index] := FLY_UP
      end
    end
    else if direction == FLY_UP then
    begin
      if ypos[index] < 59 then
      begin
        // over us the ceiling, fly down
        fly_direction[index] := FLY_DOWN
      end
    end

    if direction == FLY_DOWN then
    begin
      // check if there is a floor under us
      screen_pos := screen + 121
      floor := @mem[screen_pos]
      bottomfloor := @isFloorToJump(floor)
      if bottomfloor == 1 then
      begin
        // there is a floor under us
        if enemy_type == IDX_BAT then
        begin
          fly_direction[index] := FLY_HORIZONTAL
        end
        else
        begin
          // check if there is a floor over us
          floor := @mem[screen + 1]
          topfloor := @isFloorToJump(floor)
          if topfloor == 1 then
          begin
            // there is a floor over us
            fly_direction[index] := FLY_HORIZONTAL
            ystep[index] := 0
          end
          else
          begin
            // there is no floor over us, fly up
            fly_direction[index] := FLY_UP
          end
        end
      end
    end
    else if direction == FLY_UP then
    begin
      // fly up
      screen_pos := screen + 1
      floor := @mem[screen_pos]
      topfloor := @isFloorToJump(floor)
      if topfloor == 1 then
      begin
        // there is a floor over us
        fly_direction[index] := FLY_DOWN
      end
    end
    else
    begin
      // fly horizontal
      if enemy_type == IDX_BAT then
      begin
        // wir muessen in die Zukunft sehen, an welcher Stelle der Vampire erscheinen koennte und ob dort noch ein floor ist

        if ypos[index] & $07 == 0 and hold_count[index] == 0 then
        begin

          if RANDOM < attackIndex[index] then // it is dynamic 10 - 100%
          begin
            if xstep[index] == 1 then // move to right
            begin
              screen_pos := screen + 123 // 121 + 2
            end
            else
            begin
              screen_pos := screen + 119 // 121 - 2
            end
            floor := @mem[screen_pos]
            bottomfloor := @isFloorToJump(floor)
            if bottomfloor == 1 then
            begin
              enemy_type := IDX_VAMPIRE
              type[index] := IDX_VAMPIRE
              hold_count[index] := 200 // we would like to be a little bit longer a vampire
              anim_number[index] := 13
              enemy_color[index] := $1f
              attackIndex[index] := 25
            end
          end
        end
      end

      if enemy_type == IDX_BAT then
      begin
        if ypos[index] & $07 != 0 then
        begin
          ypos[index] := ypos[index] - 1
        end

        // check in top and bottom still exist
        // top away, fly up
        // bottom away, fly down
        // top and bottom away, check xpos. On the left, fly down else fly up

        screen_pos := screen + 121
        floor := @mem[screen_pos]
        bottomFloor := @isFloorToJump(floor)

        screen_pos := screen + 1
        floor := @mem[screen_pos]
        topfloor := @isFloorToJump(floor)

        if bottomfloor == 1 then
        begin
          if topfloor == 0 then
          begin
            fly_direction[index] := FLY_UP
          end
          else
          begin
            // fly still horizontal
          end
        end
        else
        // bottom floor is 0
        begin
          if topfloor == 1 then
          begin
            fly_direction[index] := FLY_DOWN
          end
          else
          begin
            // both top and bottom are 0
            if xpos[index] < 80 then
            begin
              fly_direction[index] := FLY_DOWN
            end
            else
            begin
              fly_direction[index] := FLY_UP
            end
          end
        end
      end
    end
  end

  if enemy_type == IDX_BAT then
  begin
    if attackIndex[index] < 250 then
    begin
      attackIndex[index] := attackIndex[index] + 1
    end
  end

  ypos[index] := ypos[index] + ystep[index]
end
