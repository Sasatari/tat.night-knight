include mk:dude

byte hitclr = $d01e
byte p0pl = $d00c // Collisionsregister Player 0 mit anderen Playern

byte ntsc_color_add = @ntsc_color_add

//
//                OOO  OO            OOO            OOO   OO
//                 OO  OO             OO           OO     OO
// OO   OO  OOOOO  OO  OO  OO         OO   OOOO  OOOOOO OOOOOO
// OO   OO OO  OO  OO  OO OO          OO  OO  OO   OO     OO
// OO O OO OO  OO  OO  OOOOO          OO  OOOOOO   OO     OO
// OO O OO OO  OO  OO  OO  OO         OO  OO       OO     OO
//  OO OO   OOOOO OOOO OO   OO       OOOO  OOOO    OO      OOO
//

byte array @dude_p1_go_left_0[17] = [

%.1111..., // Muetze
%1...11..,
%.1.1.1.., // Augenbrauen
%........,
%........,
%........,
%11.11..., // Bart
%........,

%.....1.., // Arm
%..1111.., // Koerper
%..11.1..,
%..11....,
%..111...,
%..111...,
%........,
%..111...,
]

byte array @dude_p2_go_left_0[17] = [

%........,
%........,
%..1...1.,
%..1.1.1.,
%..1.1...,
%.1111...,
%..1.....,
%..111...,

%........,
%........,
%........,
%........,
%.....1.., // hand
%........,
%...1...., // Nacktes Bein
%........,
]

byte array @dude_p1_go_left_1[17] = [
%..1111..,
%.1...11.,
%..1.1.1.,
%........,
%......1.,
%.1...1..,
%..1.1...,
%........,

%.....1..,
%..111.1.,
%..111...,
%..111...,
%1.11....,
%1...1.1.,
%11....1.,
%.1...11.,
]

byte array @dude_p2_go_left_1[17] = [
%.......1,
%.......1,
%...1...1,
%...1.1..,
%...1.1..,
%..111...,
%...1.1..,
%..111...,

%........,
%1.......,
%1.....1.,
%......1.,
%........,
%.11..1..,
%..1.11..,
%........,
]

byte array @dude_p1_go_left_2[17] = [
%..1111..,
%.1...11.,
%..1.1.1.,
%........,
%......1.,
%.1...1..,
%..1.1...,
%........,

%.....1..,
%.....1..,
%....11..,
%........,
%.11.11.1,
%..1.1..1,
%.......1,
%111...11,
]

byte array @dude_p2_go_left_2[17] = [
%.......1,
%.......1,
%...1...1,
%...1.1..,
%...1.1..,
%..111...,
%...1.1..,
%..111...,

%........,
%..11....,
%..11....,
%........,
%......1.,
%.1...11.,
%.11...1.,
%........,
]

// Zeigt in die @all_sprite_data_table
byte array @dude_go_left[12] = [
10,11,10,11,10,11,10,11,10,11,
12,13,12,13,12,13,12,13,12,13,
14,15,14,15,14,15,14,15,14,15,
16,17,16,17,16,17,16,17,16,17,
ANIM_END
]

//
//    OO                             OOO            OOO   OO
//                                    OO           OO     OO
//    OO OO  OO OOO OO  OOOOO         OO   OOOO  OOOOOO OOOOOO
//    OO OO  OO OOOOOOO OO  OO        OO  OO  OO   OO     OO
//    OO OO  OO OO O OO OO  OO        OO  OOOOOO   OO     OO
//    OO OO  OO OO O OO OOOOO         OO  OO       OO     OO
//    OO  OOOOO OO O OO OO           OOOO  OOOO    OO      OOO
// OOOO                 OO

byte array @dude_p1_jump_left_0[17] = [

%..1111..,
%.1...11.,
%..1.1.1.,
%........,
%......1.,
%.1...1..,
%..1.1...,
%........,

%........,
%..1111..,
%..11....,
%1.111...,
%1..111.1,
%11..1..1,
%.1....11,
%........,
]

byte array @dude_p2_jump_left_0[17] = [

%.......1,
%.......1,
%...1...1,
%...1.1..,
%...1.1..,
%..111...,
%...1.1..,
%..111...,

%1......1,
%1......1,
%........,
%........,
%.11...1.,
%..1..11.,
%........,
%........,
]

byte array @dude_jump_left[3] = [
18,19,
ANIM_END
]


//
//    OO                                     OO         OO       OO
//                                                      OO       OO
//    OO OO  OO OOO OO  OOOOO        OOOOO  OOO   OOOOO OOOOO  OOOOOO
//    OO OO  OO OOOOOOO OO  OO       OO  OO  OO  OO  OO OO  OO   OO
//    OO OO  OO OO O OO OO  OO       OO      OO  OO  OO OO  OO   OO
//    OO OO  OO OO O OO OOOOO        OO      OO   OOOOO OO  OO   OO
//    OO  OOOOO OO O OO OO           OO     OOOO     OO OO  OO    OOO
// OOOO                 OO                       OOOOO

byte array @dude_p1_jump_right_0[17] = [

%..1111..,
%.11...1.,
%.1.1.1..,
%........,
%.1......,
%..1...1.,
%...1.1..,
%........,

%........,
%..1111..,
%....11..,
%...111.1,
%1.111..1,
%1..1..11,
%11....1.,
%........,
]

byte array @dude_p2_jump_right_0[17] = [

%1.......,
%1.......,
%1...1...,
%..1.1...,
%..1.1...,
%...111..,
%..1.1...,
%...111..,

%1......1,
%1......1,
%........,
%........,
%.1...11.,
%.11..1..,
%........,
%........,
]

byte array @dude_jump_right[12] = [
28,29,
ANIM_END,
]


//
//                OOO  OO                    OO         OO       OO
//                 OO  OO                               OO       OO
// OO   OO  OOOOO  OO  OO  OO        OOOOO  OOO   OOOOO OOOOO  OOOOOO
// OO   OO OO  OO  OO  OO OO         OO  OO  OO  OO  OO OO  OO   OO
// OO O OO OO  OO  OO  OOOOO         OO      OO  OO  OO OO  OO   OO
// OO O OO OO  OO  OO  OO  OO        OO      OO   OOOOO OO  OO   OO
//  OO OO   OOOOO OOOO OO   OO       OO     OOOO     OO OO  OO    OOO
//                                               OOOOO

byte array @dude_p1_go_right_0[17] = [
%...1111., // Muetze
%..11...1,
%..1.1.1., // Augenbrauen
%........,
%........,
%........,
%...11.11, // Bart
%........,

%..1....., // Arm
%..1111.., // Koerper
%..1.11..,
%....11..,
%...111..,
%...111..,
%........,
%...111..,
]

byte array @dude_p2_go_right_0[17] = [
%........,
%........,
%.1...1..,
%.1.1.1..,
%...1.1..,
%...1111.,
%.....1..,
%...111..,

%........,
%........,
%........,
%........,
%..1....., // hand
%........,
%....1..., // Nacktes Bein
%........,
]

byte array @dude_p1_go_right_1[17] = [
%..1111..,
%.11...1.,
%.1.1.1..,
%........,
%.1......,
%..1...1.,
%...1.1..,
%........,

%..1.....,
%.1.111..,
%...111..,
%...111..,
%....11.1,
%.1.1...1,
%.1....11,
%.11...1.,
]

byte array @dude_p2_go_right_1[17] = [
%1.......,
%1.......,
%1...1...,
%..1.1...,
%..1.1...,
%...111..,
%..1.1...,
%...111..,

%........,
%.......1,
%.1.....1,
%.1......,
%........,
%..1..11.,
%..11.1..,
%........,
]

byte array @dude_p1_go_right_2[17] = [
%..1111..,
%.11...1.,
%.1.1.1..,
%........,
%.1......,
%..1...1.,
%...1.1..,
%........,

%..1.....,
%..1.....,
%..11....,
%........,
%1.11.11.,
%1..1.1..,
%1.......,
%11...111,
]

byte array @dude_p2_go_right_2[17] = [
%1.......,
%1.......,
%1...1...,
%..1.1...,
%..1.1...,
%...111..,
%..1.1...,
%...111..,

%........,
%....11..,
%....11..,
%........,
%.1......,
%.11...1.,
%.1...11.,
%........,
]

byte array @dude_go_right[12] = [
20,21,20,21,20,21,20,21,20,21,
22,23,22,23,22,23,22,23,22,23,
24,25,24,25,24,25,24,25,24,25,
26,27,26,27,26,27,26,27,26,27,
ANIM_END
]

// (fset 'rotate-line
//   [right ?\C-  right right right right ?\C-w right right right right ?\C-y home right ?\C-  right right ?\C-w right right ?\C-y ?\C-  right right ?\C-w right right ?\C-y home right right ?\C-t right right left ?\C-t right ?\C-t right ?\C-t home down])

byte array @dude_p1_dead_left[17] = [
%........,
%........,
%........,
%........,
%.11111..,
%1.....1.,
%.1111..1,
%..1.11.1,
%..1.11.1,
%..1.11..,
%.1.111..,
%.111....,
%........,
%11..11.1,
%1.1....1,
%.111.11.,
]

byte array @dude_dead_left[1] = [
  30,
  ANIM_END
]

byte array @dude_p1_dead_right[17] = [
%........,
%........,
%........,
%........,
%..11111.,
%.1.....1,
%1..1111.,
%1.11.1..,
%1.11.1..,
%..11.1..,
%..111.1.,
%....111.,
%........,
%1.11..11,
%1....1.1,
%.11.111.,
]

byte array @dude_dead_right[1] = [
  31,
  ANIM_END
]


// in Piskel zusammengeklickt
// Blow up sich fuellender Kreis
byte array @form0[1] = [  $00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00 ]
byte array @form1[1] = [  $00,$00,$00,$00,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$00,$00 ]
byte array @form2[1] = [  $00,$00,$00,$00,$00,$18,$3c,$7e,$7e,$7e,$7e,$3c,$18,$00,$00,$00 ]
byte array @form3[1] = [  $00,$00,$00,$3c,$7e,$7e,$ff,$ff,$ff,$ff,$ff,$ff,$7e,$7e,$3c,$00 ]
byte array @form4[1] = [  $00,$00,$00,$3c,$7e,$7e,$ff,$ff,$e7,$e7,$ff,$ff,$7e,$7e,$3c,$00 ]
byte array @form5[1] = [  $00,$00,$00,$3c,$7e,$7e,$ff,$e7,$c3,$c3,$e7,$ff,$7e,$7e,$3c,$00 ]
byte array @form6[1] = [  $00,$00,$00,$3c,$7e,$66,$c3,$81,$81,$81,$81,$c3,$66,$7e,$3c,$00 ]
byte array @form7[1] = [  $00,$00,$00,$3c,$42,$42,$81,$81,$81,$81,$81,$81,$42,$42,$3c,$00 ]
byte array @formEmpty[1] = [  $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ]


byte array blowAway[1] = [
        8, // @formEmpty,
        0, // @form0,
        1, // @form1,
        2, // @form2,
        3, // @form3,
        4, // @form4,
        5, // @form5,
        6, // @form6,
        7, // @form7,
        8, // @formEmpty,
        8, // @formEmpty,
        ANIM_END
      ]

byte array @blow[1] = [
        8, // @formEmpty,
        0, // @form0,
        0, // @form0,
        1, // @form1,
        1, // @form1,
        2, // @form2,
        2, // @form2,
        3, // @form3,
        3, // @form3,
        8, // @formEmpty,
        ANIM_END,

// Position 11
        8, // @formEmpty,
        3, // @form0,
        3, // @form0,
        2, // @form1,
        2, // @form1,
        1, // @form2,
        1, // @form2,
        0, // @form0,
        0, // @form0,
        8, // @formEmpty,
        ANIM_END
]

//                                                       OO
//                                                       OO
// OOO OO   OOOO  OO   OO  OOOO  OOO OO   OOOO  OOOOO  OOOOOO
// OOOOOOO OO  OO OO   OO OO  OO OOOOOOO OO  OO OO  OO   OO
// OO O OO OO  OO OO   OO OOOOOO OO O OO OOOOOO OO  OO   OO
// OO O OO OO  OO  OO OO  OO     OO O OO OO     OO  OO   OO
// OO O OO  OOOO    OOO    OOOO  OO O OO  OOOO  OO  OO    OOO
//

byte lives = @lives
byte level = @level
byte shield_protection = @shield_protection
byte timer = @timer

byte dude_xpos = @dude_xpos
byte dude_ypos = @dude_ypos

byte dude_states
byte waitstates

byte number

byte dude_draw_p1
byte dude_draw_p2

byte dude_number
byte opendoor

//procedure @setDudeAnimation(number)
//begin
//  dude_number := number
//end

byte last_direction

byte xpos_, ypos_

byte dude_start_xpos = @dude_start_xpos
byte dude_start_ypos = @dude_start_ypos

byte is_jump
byte is_jump_up
byte jump_animation

byte countOfEnteredFloor = @countOfEnteredFloor

byte array sprite_x[MAX_SPRITES] = @sprite_x
byte array sprite_y[MAX_SPRITES] = @sprite_y
byte array sprite_shape[MAX_SPRITES] = @sprite_shape
byte array sprite_color[MAX_SPRITES] = @sprite_color

word key_background = @key_background
word key_screen = @key_screen
word key_image = @key_image
byte key_occured = @key_occured
byte key_ypos_for_color = @key_ypos_for_color

word sandclock_background = @sandclock_background
word sandclock_screen = @sandclock_screen
word sandclock_image = @sandclock_image
byte sandclock_occured = @sandclock_occured
byte sandclock_ypos_for_color = @sandclock_ypos_for_color

word stopwatch_background = @stopwatch_background
word stopwatch_screen = @stopwatch_screen
word stopwatch_image = @stopwatch_image
byte stopwatch_occured = @stopwatch_occured
byte stopwatch_ypos_for_color = @stopwatch_ypos_for_color

word shield_background = @shield_background
word shield_screen = @shield_screen
word shield_image = @shield_image
byte shield_occured = @shield_occured
byte shield_ypos_for_color = @shield_ypos_for_color

word gems_background = @gems_background
word gems_screen = @gems_screen
word gems_image = @gems_image
byte gems_occured = @gems_occured
byte gems_ypos_for_color = @gems_ypos_for_color

word door_open_image = @door_open_image

byte dude_alive       // 1 Dude lives
byte @dead_countdown
byte dead_countdown = @dead_countdown // runterzaehlen, wie lange Dude tot an einer Stelle bleibt ~2s
byte immortal_countdown // runterzaehlen, wie lange Dude unverwundbar ist

// byte pal=$D014

procedure @dude_after_dead()
begin
  dude_number := 0
  dude_xpos := dude_start_xpos // will set in @load_background in playfield.wnf
  dude_ypos := dude_start_ypos

  dude_alive := 1
  dead_countdown := 0
  immortal_countdown := 160
end

byte colbk_flash = @colbk_flash

// Dude stirbt, beim Beruehren von Messern, Pfeilen oder Gegnern
// Stirbt nicht, wenn er einen Shield hat
procedure @dude_died()
begin
  if dude_alive == 1 and immortal_countdown == 0 then
  begin
    if shield_protection == 1 then
    begin
      shield_protection := 0
      colbk_flash := 15 // FLASH
      immortal_countdown := 160
    end
    else
    begin
      dude_alive := 0
      dead_countdown := 64
      @audio_play_dude_died()
      lives := lives - 1
    end
    @initHeart()
  end
end

procedure @clear_dude()
begin
  sprite_x[0] := 0
  sprite_x[1] := 0
end

byte countOfEnemies

procedure @init_dude()
begin
  dude_states := 0
  waitstates := 2

  dude_color_p1 := color_dude_p1_pal + ntsc_color_add
  dude_color_p2 := color_dude_p2_pal + ntsc_color_add

  //dude_xpos := dude_start_xpos // will set in @load_background in playfield.wnf
  //dude_ypos := dude_start_ypos

  opendoor := 0
  countOfEnteredFloor := 0

  last_direction := DIRECTION_STAY_LOOK_RIGHT
  is_jump := 1
  jump_animation := 10
  is_jump_up := 0
  @dude_after_dead()
  immortal_countdown := 0
  countOfEnemies := @getEnemies()
end

// directions knows 6 directions
// stay look right
// stay look left
// go right
// go left
// jump right
// jump left

byte direction
byte jump_direction

byte is_walk

byte x,y
byte ypf

byte line
byte yposQuad

byte lines
byte lines_under

// byte array ypf_to_enemy_ypos[1] = @ypf_to_enemy_ypos

byte color_dude1
byte color_dude2
byte yadd

//
//     OO                                 OO            OO
//     OO                                 OO            OO
//  OOOOO OOOOO   OOOOO OO   OO        OOOOO OO  OO  OOOOO  OOOO
// OO  OO OO  OO OO  OO OO   OO       OO  OO OO  OO OO  OO OO  OO
// OO  OO OO     OO  OO OO O OO       OO  OO OO  OO OO  OO OOOOOO
// OO  OO OO     OO  OO OO O OO       OO  OO OO  OO OO  OO OO
//  OOOOO OO      OOOOO  OO OO         OOOOO  OOOOO  OOOOO  OOOO
//

// Paint the dude at position xpos, ypos
procedure @drawDude(direction)
begin
  color_dude1 := DUDE_COLOR_P1
  color_dude2 := DUDE_COLOR_P2
  yadd := 0

  if direction == DIRECTION_STAY_LOOK_RIGHT then
  begin
    dude_draw_p1 := @dude_go_right[0]
    dude_draw_p2 := @dude_go_right[1]
  end

  else if direction == DIRECTION_STAY_LOOK_LEFT then
  begin
    dude_draw_p1 := @dude_go_left[0]
    dude_draw_p2 := @dude_go_left[1]
  end

  else if direction == DIRECTION_JUMP_RIGHT then
  begin
    dude_draw_p1 := @dude_jump_right[0]
    dude_draw_p2 := @dude_jump_right[1]
  end

  else if direction == DIRECTION_JUMP_LEFT then
  begin
    dude_draw_p1 := @dude_jump_left[0]
    dude_draw_p2 := @dude_jump_left[1]
  end

  else if direction == DIRECTION_WALK_RIGHT then
  begin
    // Animation walk right
    dude_draw_p1 := @dude_go_right[dude_number]
    dude_draw_p2 := @dude_go_right[dude_number+1]
    if dude_draw_p1 == ANIM_END then
    begin
      dude_number := 0
      dude_draw_p1 := @dude_go_right[dude_number]
      dude_draw_p2 := @dude_go_right[dude_number+1]
    end
    // INFO: da der Dude schon 16pixel hoch ist, muss das "Hoppeln" emuliert werden durch addition von -1
    if dude_draw_p1 == 22 or dude_draw_p1 == 26 then
    begin
      yadd := 255
    end
    dude_number := dude_number + 2
  end

  else if direction == DIRECTION_WALK_LEFT then
  begin
    // Animation walk left
    dude_draw_p1 := @dude_go_left[dude_number]
    dude_draw_p2 := @dude_go_left[dude_number+1]
    if dude_draw_p1 == ANIM_END then
    begin
      dude_number := 0
      dude_draw_p1 := @dude_go_left[dude_number]
      dude_draw_p2 := @dude_go_left[dude_number+1]
    end
    // INFO: da der Dude schon 16pixel hoch ist, muss das "Hoppeln" emuliert werden durch addition von -1
    if dude_draw_p1 == 12 or dude_draw_p1 == 16 then
    begin
      yadd := 255
    end
    dude_number := dude_number + 2
  end

  else if direction == DIRECTION_BLOW_AWAY then
  begin
    // Animation blow away
    dude_draw_p1 := blowAway[dude_number]
    dude_draw_p2 := blowAway[dude_number+1]
    if dude_draw_p2 == ANIM_END then
    begin
      dude_number := 9
      dude_draw_p1 := blowAway[dude_number]
      dude_draw_p2 := blowAway[dude_number]
    end
    dude_number := dude_number + 1
  end
  else if direction == DIRECTION_DEAD_LEFT then
  begin
    dude_draw_p1 := @dude_dead_left[0]
    dude_draw_p2 := blowAway[0]

    if dead_countdown & %00001000 != 0 then
    begin
      color_dude1 := 0
    end
  end
  else if direction == DIRECTION_DEAD_RIGHT then
  begin
    dude_draw_p1 := @dude_dead_right[0]
    dude_draw_p2 := blowAway[0]

    if dead_countdown & %00001000 != 0 then
    begin
      color_dude1 := 0
    end
  end
  if immortal_countdown != 0 then
  begin
    immortal_countdown := immortal_countdown - 1
    if immortal_countdown & %00000100 != 0 then
    begin
      color_dude1 := color_dude1 & %11110010
      color_dude2 := color_dude2 & %11110010
    end
  end

  x := xoffset + dude_xpos
  y := dude_ypos

  sprite_shape[0] := dude_draw_p1
  sprite_color[0] := color_dude1 // COLOR_DUDE_P1
  sprite_x[0] := x
  sprite_y[0] := y + yadd

  sprite_shape[1] := dude_draw_p2
  sprite_color[1] := color_dude2
  sprite_x[1] := x
  sprite_y[1] := y + yadd

//  @gotoxy(22,0)
//  @printff("%d %d", dude_xpos, dude_ypos)

//  @wait_and_show_all_sprites()
//  @wait_and_show_all_sprites()
//  @wait_and_show_all_sprites()
//  @wait_and_show_all_sprites()
//  @wait_and_show_all_sprites()

end

byte i

procedure @dude_blow_away()
begin
  dude_number := 0

  for i:=0 to 11 do
  begin
    @drawDude(DIRECTION_BLOW_AWAY)

    @wait_and_show_all_sprites()
    @wait_and_show_all_sprites()
  end
end

//
//                   OO                                                      OO
//                   OO                                                      OO
// OO  OO OOOOO   OOOOO  OOOO  OOOOO   OOOOO OOOOO   OOOO  OO  OO OOOOO   OOOOO
// OO  OO OO  OO OO  OO OO  OO OO  OO OO  OO OO  OO OO  OO OO  OO OO  OO OO  OO
// OO  OO OO  OO OO  OO OOOOOO OO     OO  OO OO     OO  OO OO  OO OO  OO OO  OO
// OO  OO OO  OO OO  OO OO     OO      OOOOO OO     OO  OO OO  OO OO  OO OO  OO
//  OOOOO OO  OO  OOOOO  OOOO  OO         OO OO      OOOO   OOOOO OO  OO  OOOOO
//                                    OOOOO

word readonly array yposdiv8mul40[@split] = @yposdiv8mul40
word screen = @screen
word game_screen_p_ypos
byte underdude


byte readonly array jump_ystep[1] = @jump_table // find in enemy-data.wnf

byte xstep, ystep
byte up_background
byte floor
byte topfloor
byte bottomfloor
byte wall

byte countOfEnterableFloors = @countOfEnterableFloors
byte wizard_can_change_the_floor = @wizard_can_change_the_floor

word door_screen = @door_screen

procedure checkEnteredFloor()
begin
  if countOfEnteredFloor == countOfEnterableFloors then
  begin
    // we have all floors arrived
    // key occur
    colbk_flash := 15           // FLASH
    countOfEnteredFloor := 255  // we will only a single flash
    @drawblock1x2(adr:key_image, key_screen)
    wizard_can_change_the_floor := 0
    @audio_play_key_occur()
  end
end


procedure switchFloorToYellow(screen)
begin
    @mem[screen] := [FLOOR_YELLOW_1, FLOOR_YELLOW_2]

    countOfEnteredFloor := countOfEnteredFloor + 1
    @audio_play_make_yellow(dude_xpos/4-4)
    // if we realize that there are all floors arrived, we play "key occur"
    checkEnteredFloor()
    @add_current_score(score_enter_floor)
end


procedure enteredFloor(screen)
begin
  if floor == FLOOR_1 or floor == FLOOR_2 then
  begin
    switchFloorToYellow(screen & $fffe)
  end
end


byte on_elevator

byte ch=764
word screen_dude_upper_left

procedure checkUnderDude()
begin
  on_elevator := 0
  if dude_ypos & 7 == 0 then
  begin
    floor := @mem[screen_dude_upper_left + 121]
    bottomfloor := @isFloorToWalk(floor)
    if bottomfloor == 1 then
    begin
      enteredFloor(screen_dude_upper_left+121)
    end
    else if floor >= ELEVATOR_1 and floor <= ELEVATOR_6 then
    begin
      on_elevator := 1
      // elevator!
    end
    else if floor == BODEN_MESSER_1HI or floor == BODEN_MESSER_2HI then
    begin
      @dude_died()
    end
    else
    begin
      // not more floor, falling
      is_jump := 1
      jump_animation := 10
      ystep := 4
    end
  end
  else
  begin
    floor := @mem[screen_dude_upper_left + 121]
    if floor >= ELEVATOR_1 and floor <= ELEVATOR_6 then
    begin
      on_elevator := 1
    end
  end
end

byte elevator_mode
byte elevator_direction
byte dude_ypos_and_7

byte seconds = @seconds

byte key_value = @key_value
byte array gem_removed[1] = @gem_removed

word screen_pos

byte collision_dude_xpos
byte collision_dude_ypos
byte collision_sprite_xpos
byte collision_sprite_ypos

byte array waitforani[MAX_ENEMIES] = @enemy_waitforani
byte flicker_enemies = @flicker_enemies

//
//                                         OO            OO
//                                         OO            OO
// OOO OO   OOOO  OO   OO  OOOO         OOOOO OO  OO  OOOOO  OOOO
// OOOOOOO OO  OO OO   OO OO  OO       OO  OO OO  OO OO  OO OO  OO
// OO O OO OO  OO OO   OO OOOOOO       OO  OO OO  OO OO  OO OOOOOO
// OO O OO OO  OO  OO OO  OO           OO  OO OO  OO OO  OO OO
// OO O OO  OOOO    OOO    OOOO         OOOOO  OOOOO  OOOOO  OOOO
//
procedure @move_Dude()
begin

  if dude_states == waitstates then
  begin
    dude_states := 0
  end
  else
  begin
    dude_states := dude_states + 1

//    // TODO: for Debug!
//    if old_screen_set[0] == 1 then
//    begin
//      old_screen_set[0] := 0
//      @mem[old_screen_pos[0]] := old_screen_value[0]
//    end

    on_elevator := 0

    screen_dude_upper_left := (dude_xpos)/4 + yposdiv8mul40[dude_ypos-24] + game_screen // (ypos / 8)*40

//    @mem[screen_dude_upper_left + 1] := 1

//    @fast_gotoxy(4,0)
//    @printff("XPOS:%d  YPOS:%d  ", dude_xpos, dude_ypos)

    direction := last_direction
    if dude_alive == 1 then
    begin
      if @stickleft(0) == 1 or key_value == 30 then
      begin
        direction := DIRECTION_STAY_LOOK_LEFT
        is_walk := DIRECTION_WALK
        xstep := 255 // -1
        key_value := 0
      end
      else if @stickright(0) == 1 or key_value == 31 then
      begin
        direction := DIRECTION_STAY_LOOK_RIGHT
        is_walk := DIRECTION_WALK
        xstep := 1
        key_value := 0
      end
      else
      begin
        is_walk := 0
        if is_jump == 0 then
        begin
          xstep := 0
        end
      end
    end
    else
    begin
      is_walk := 0
      if is_jump == 0 then
      begin
        xstep := 0
      end
    end

    // start a jump if button is pressed and we are not already in a jump
    if is_jump == 0 then
    begin
      // we do not jump
      if @strig(0) == 0 and dude_alive == 1 then
      begin
        // we start jump
        is_jump := 1
        is_jump_up := 1 // need to look over the dude
        jump_animation := 0
        @audio_play_dude_jump(dude_xpos/4-4)
      end
      else
      begin
        direction := direction ! is_walk
      end
    end
    else // jump != 0
    begin
      // we are in jump
      direction := direction ! DIRECTION_JUMP
      ystep := jump_ystep[jump_animation]
      if ystep == 0 then
      begin
        // jump switch arrived, now, we are falling
        is_jump_up := 0
      end
      if ystep == 127 then
      begin
        is_jump := 0
        ystep := 0
      end
      else
      begin
        jump_animation := jump_animation + 1
        if is_jump_up == 0 then
        begin
          // we are falling, so check the floor
          if dude_ypos & 7 == 0 then
          begin
            screen_pos := screen_dude_upper_left+121
            floor := @mem[screen_pos]
            bottomfloor := @isFloorToWalk(floor)
//            // TODO: for Debug!
//            old_screen_pos[0] := screen_pos
//            old_screen_value[0] := floor
//            old_screen_set[0] := 1
//            @mem[screen_pos] := 1

//            @fast_gotoxy(25,0)
//            @printff("%d  ", dude_ypos)

            if dude_ypos >= 56 then
            begin
              // we can walk over the normal floor, the yellow floor and the wall
              if bottomfloor == 1 then
              begin
                // wall or floor under Dude
                // TODO: vielleicht nochmal genauer pruefen, es besteht die Moeglichkeit das wir durchfallen
                wall := @mem[screen_dude_upper_left + 81]
                if wall != WALL_1 and wall != WALL_2 then
                begin
                  // only if we do not stay in wall
                  enteredFloor(screen_pos)
                  // floor realised, stop jump
                  ystep := 0
                  is_jump := 0
                end
              end
              else if floor == BODEN_MESSER_1HI or floor == BODEN_MESSER_2HI then
              begin
                @dude_died()
                ystep := 0
                xstep := 0
              end
              else if floor >= ELEVATOR_1 and floor <= ELEVATOR_6 then
              begin
                // elevator!
                ystep := 0
                is_jump := 0
                on_elevator := 1
              end
            end
          end
        end
      end
    end

    if xstep != 0 then
    begin
      if dude_ypos > 16 then
      begin
        if xstep == 1 then
        begin
          // check right for wall
          wall := @mem[screen_dude_upper_left+82]
          if wall == WALL_1 or wall == WALL_2 then
          begin
            xstep := 0
          end
        end
        else
        begin
          // check left for wall
          wall := @mem[screen_dude_upper_left+80]
          if wall == WALL_1 or wall == WALL_2 then
          begin
            xstep := 0
          end
        end
      end
    end

    if is_jump == 0 and on_elevator == 0 then
    begin
      if dude_ypos <= 200 then
      begin
        checkUnderDude()
      end
    end

    if ystep != 0 then dude_ypos := dude_ypos + ystep
    if xstep != 0 then dude_xpos := dude_xpos + xstep

    if dude_ypos > 200 then
    begin
      ystep := 0
      xstep := 0
      is_jump := 0
      @dude_died()
    end


    // screen := (dude_xpos+2)/4 + yposdiv8mul40[dude_ypos-8] + game_screen // (ypos / 8)*40
    if dude_alive == 1 then
    begin

//
//  OOOO  OOOOOO OO   OO  OOOO
// OO  OO OO     OOO OOO OO
// OO     OO     OOOOOOO OO
// OO     OOOO   OO O OO  OOOO
// OO OOO OO     OO   OO     OO
// OO  OO OO     OO   OO     OO
//  OOOO  OOOOOO OO   OO  OOOO
//
      // we check under dude only if NOT dead
      underdude := @mem[screen_dude_upper_left+81]

      if underdude >= 19 then
      begin
        if underdude >= SANDCLOCK_1 and underdude <= SANDCLOCK_4 then
        begin
          // Sandclock
          colbk_flash := 15
          @drawblock2x2(adr:sandclock_background, sandclock_screen)
          gem_removed[2] := 1
          @audio_play_take_gem()
          @seconds_white_background()
          seconds := 60
        end

        if underdude >= STOPWATCH_1 and underdude <= STOPWATCH_4 then
        begin
          // Stopwatch
          colbk_flash := 15
          @drawblock2x2(adr:stopwatch_background, stopwatch_screen)
          gem_removed[3] := 1
          @audio_play_take_gem()
          for i:=0 to @getEnemies() do
          begin
            waitforani[i] := 255
          end
          timer := 254         // hold on timer for ~5s
          flicker_enemies := 2 // prepare for flicker
        end

        if underdude >= SHIELD_1 and underdude <= SHIELD_4 then
        begin
          // Shield
          colbk_flash := 15
          @drawblock2x2(adr:shield_background, shield_screen)
          gem_removed[1] := 1
          @audio_play_take_gem()

          @init_shield()
          shield_protection := 1
        end

        if underdude >= GEMS_1 and underdude <= GEMS_4 then
        begin
          // Gems
          colbk_flash := 15
          @drawblock2x2(adr:gems_background, gems_screen)
          gem_removed[0] := 1
          @audio_play_take_gem(dude_xpos/4-4)

          @add_current_score(score_gems)
        end

        if opendoor == 1 then
        begin
          if underdude >= DOOR_OPENED_1 and underdude <= DOOR_OPENED_6 then
          begin
            // Dude leave the stage through the open door
            game_mode := MODE_LEVEL_DONE
            @audio_play_enter_open_door(dude_xpos/4-4)
          end
        end
        else // opendoor != 0
        begin
          if underdude == KEY_1 or underdude == KEY_2 then
          begin
            // key found, restore background
            colbk_flash := 15
            @drawblock1x2(adr:key_background, key_screen)

            // Change to open Door
            screen := door_screen
            @drawblock3x2(adr:door_open_image, screen)
            opendoor := 1
            @audio_play_take_key(dude_xpos/4-4)
          end
        end
      end
    end

//
//               OOO  OOO   OO          OO
//                OO   OO
//  OOOO   OOOO   OO   OO  OOO   OOOO  OOO   OOOO  OOOOO
// OO  OO OO  OO  OO   OO   OO  OO      OO  OO  OO OO  OO
// OO     OO  OO  OO   OO   OO   OOOO   OO  OO  OO OO  OO
// OO  OO OO  OO  OO   OO   OO      OO  OO  OO  OO OO  OO
//  OOOO   OOOO  OOOO OOOO OOOO  OOOO  OOOO  OOOO  OO  OO
//

    if p0pl != 0 then
    begin
      // Dude Player 0 collide with something
      // @fast_gotoxy(22,0)
      // @printff("collide %d ", p0pl)
      hitclr := 1

      if countOfEnemies > 0 then
      begin
        collision_dude_ypos := sprite_y[0] / 8

        for i:=1 to countOfEnemies+2 do
        begin
          if sprite_shape[i] >= 40 then   // ab 40 beginnen die Enemies
          begin
            collision_sprite_ypos := sprite_y[i] / 8
            if collision_dude_ypos == collision_sprite_ypos then
            begin
              // yposition von Sprite und Dude sind gleich
              collision_dude_xpos := sprite_x[0] / 8
              collision_sprite_xpos := sprite_x[i] / 8
              if collision_dude_xpos == collision_sprite_xpos then
              begin
                // xposition von Sprite und Dude sind auch gleich
                @dude_died()
                break  // weitere Suche nicht notwendig
              end
            end
          end
        end
      end
    end

    if dude_alive == 0 then
    begin
      direction := (direction & %00000011) ! DIRECTION_DEAD
      dead_countdown := dead_countdown - 1

      if dead_countdown == 1 then
      begin
        @dude_after_dead()
      end
    end

    @drawDude(direction)

    // we need only the last look direction
    last_direction := direction & %00000011
  end

//
//                            OOO                          OO
//                             OO                          OO
//  OOOO  OOOOO         OOOO   OO   OOOO  OO   OO  OOOOO OOOOOO  OOOO  OOOOO
// OO  OO OO  OO       OO  OO  OO  OO  OO OO   OO OO  OO   OO   OO  OO OO  OO
// OO  OO OO  OO       OOOOOO  OO  OOOOOO OO   OO OO  OO   OO   OO  OO OO
// OO  OO OO  OO       OO      OO  OO      OO OO  OO  OO   OO   OO  OO OO
//  OOOO  OO  OO        OOOO  OOOO  OOOO    OOO    OOOOO    OOO  OOOO  OO
//

  if on_elevator == 1 then
  begin
    elevator_mode := @getElevatorMode()
    if elevator_mode == 1 then
    begin
      dude_xpos := dude_xpos + @getElevatorDirectionTicks()
    end
    else if elevator_mode == 2 then
    begin
      // Fuer eine sauberere Positionierung nutzen wir hier einen kleinen Ausgleich
      // TODO: Dude ruckelt etwas.
      if @getElevatorDirection() == 2 then
      begin
        dude_ypos := @getCurrentElevator() + 34 // 2 + 32
      end
      else
      begin
        dude_ypos := @getCurrentElevator() + 30 // - 2 + 32
      end
    end
  end
  else
  begin
    // Das Dude-Ypos-Dilemma
    // Nurmalerweise läuft der Dude nur auf ypos & 7 == 0 oder ypos & 7 == 4 positionen.
    // wir kontrollieren nur noch ypos & 7 == 0
    // Das klappt immer, weil der Sprung immer += 4 oder -= 4 ist, niemals etwas anderes.

    // Durch den vertikalen Elevator gibt es aber auch die ungeraden Positionierungen
    // ypos & 7 == 2, 4 oder 6.
    // Bei einem ungeraden Wert sind wir nicht gefallen und konnten uns horizontal bewegen
    // Springen wir, wird die Positionierung niemals behoben, wegen += 4 -= 4. Damit sind wir
    // aus dem Bild gefallen.
    // Sind wir also ungerade, so berichtigen wir die Ypos hier einfach durch addition von 2
    // Das klappt im Sprung und im nicht Sprung.
    // Sind wir aber bei ypos & 7 == 4 und nicht im Sprung, konnten wir den Elevator immer noch
    // verlassen, ohne an die richtige Ypos zu fallen.
    // Das wird hier jetzt auch berichtigt.

    dude_ypos_and_7 := dude_ypos & 7
    if is_jump == 0 and dude_ypos_and_7 == 4 then
    begin
      dude_ypos := dude_ypos + 2
    end
    if dude_ypos_and_7 == 6 or dude_ypos_and_7 == 2 then
    begin
      dude_ypos := dude_ypos + 2
    end
  end
  // we handle jump auf direction independently
  // so we can move left/right in jump
end
